-- List the number of films per category.
use sakila;
select count(fcat.film_id) as num_films, cat.name
from category as cat
join film_category as fcat
on cat.category_id = fcat.category_id
group by cat.name;

-- Retrieve the store ID, city, and country for each store.
SELECT s.store_id, c.city, co.country
FROM store AS s
JOIN address AS a
ON s.address_id = a.address_id 
JOIN city AS c
ON a.city_id = c.city_id        
JOIN country AS co ON c.country_id = co.country_id;

-- Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN store s ON i.store_id = s.store_id
GROUP BY s.store_id
ORDER BY total_revenue DESC;

-- Determine the average running time of films for each category.
SELECT c.name as category, ROUND(AVG(f.length), 2) AS avg_running_time
from film as f
join film_category as fc on f.film_id = fc.film_id
join category as c on fc.category_id = c.category_id
group by c.name;

-- Identify the film categories with the longest average running time.
SELECT c.name as category, ROUND(AVG(f.length), 2) AS avg_running_time
from film as f
join film_category as fc on f.film_id = fc.film_id
join category as c on fc.category_id = c.category_id
group by c.name
order by avg_running_time DESC
limit 3;

-- Display the top 10 most frequently rented movies in descending order
SELECT f.title, COUNT(*) AS rental_count
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY 
f.title
ORDER BY rental_count DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title, s.store_id, COUNT(*) AS available_copies
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN store s ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1
GROUP BY f.title, s.store_id;

